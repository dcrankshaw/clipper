FROM frolvlad/alpine-gxx


RUN apk add --update curl git bash make boost-dev \
        cmake libev-dev hiredis-dev zeromq-dev autoconf automake libtool

RUN curl -LO https://github.com/google/protobuf/archive/v3.3.0.zip \
        && unzip v3.3.0.zip \
        && cd protobuf-3.3.0 \
        && ./autogen.sh \
        && ./configure \
        && make


RUN cd /protobuf-3.3.0 && make install

# install go

RUN apk add --no-cache ca-certificates

ENV GOLANG_VERSION 1.9rc1

# https://golang.org/issue/14851 (Go 1.8 & 1.7)
# https://golang.org/issue/17847 (Go 1.7)
COPY patches/go-patch.patch /go-alpine-patches/

RUN set -eux; \
	apk add --no-cache --virtual .build-deps \
		bash \
		gcc \
		musl-dev \
		openssl \
		go \
	; \
	export \
# set GOROOT_BOOTSTRAP such that we can actually build Go
		GOROOT_BOOTSTRAP="$(go env GOROOT)" \
# ... and set "cross-building" related vars to the installed system's values so that we create a build targeting the proper arch
# (for example, if our build host is GOARCH=amd64, but our build env/image is GOARCH=386, our build needs GOARCH=386)
		GOOS="$(go env GOOS)" \
		GOARCH="$(go env GOARCH)" \
		GO386="$(go env GO386)" \
		GOARM="$(go env GOARM)" \
		GOHOSTOS="$(go env GOHOSTOS)" \
		GOHOSTARCH="$(go env GOHOSTARCH)" \
	; \
	\
	wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz"; \
	echo '87717598ea60cc6143afa48f141f7e1308e196b71862028e710b910f376b452e *go.tgz' | sha256sum -c -; \
	tar -C /usr/local -xzf go.tgz; \
	rm go.tgz; \
	\
	cd /usr/local/go/src; \
	for p in /go-alpine-patches/*.patch; do \
		[ -f "$p" ] || continue; \
		patch -p2 -i "$p"; \
	done; \
	./make.bash; \
	\
	rm -rf /go-alpine-patches; \
	apk del .build-deps; \
	\
	export PATH="/usr/local/go/bin:$PATH"; \
	go version

ENV GOPATH /go
ENV PATH $GOPATH/bin:/usr/local/go/bin:$PATH







COPY ./ /clipper

RUN cd /clipper \
    && git submodule update --init \
    && ./configure --cleanup-quiet \
    # && git submodule foreach --recursive git clean -xfd \
    # && git submodule foreach --recursive git reset --hard \
    && cd /clipper/src/libs/spdlog \
    && git apply ../patches/make_spdlog_compile_linux.patch \
    && cd /clipper \
    && git apply patches/include_grpc.patch \
    && ./configure --release \
    && cd release \
    && make grpc_cpp_plugin

RUN cd /clipper/release && make clipper_grpc_frontend

ENTRYPOINT ["/clipper/release/src/rpc_frontend/clipper_grpc_frontend"]

# vim: set filetype=dockerfile:
